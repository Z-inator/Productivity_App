import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../Authentification.dart';
import '../../Services/database.dart';
import '../../Task_Feature/Task_Feature.dart';
import '../../Time_Feature/Time_Feature.dart';
import '../../Shared/Shared.dart';

/// Used to create user-dependant objects that need to be accessible by all widgets.
/// This widget should live above the [MaterialApp].
/// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder.

class AuthWidgetBuilder extends StatelessWidget {
  const AuthWidgetBuilder({Key? key, required this.builder}) : super(key: key);
  final Widget Function(BuildContext, AsyncSnapshot<User?>) builder;

  @override
  Widget build(BuildContext context) {
    print('AuthWidgetBuilder rebuild');
    final authService = Provider.of<AuthService>(context, listen: false);
    return StreamBuilder<User?>(
      stream: authService.onAuthStateChanged,
      builder: (context, snapshot) {
        print('StreamBuilder: ${snapshot.connectionState}');
        final User? user = snapshot.data;
        if (user != null) {
          return MultiProvider(
            providers: [
              ChangeNotifierProvider<DatabaseService>(create: (context) => DatabaseService())
            ],
            builder: (context, child) {
              return MultiProvider(
                providers: [
                  StreamProvider<List<Project>>.value(value: Provider.of<DatabaseService>(context).projectListStream, initialData: [], lazy: false),
                  StreamProvider<List<Status>>.value(value: Provider.of<DatabaseService>(context).statusListStream, initialData: [], lazy: false),
                  StreamProvider<List<Task>>.value(value: Provider.of<DatabaseService>(context).taskListStream, initialData: [], lazy: false),
                  StreamProvider<List<TimeEntry>>.value(value: Provider.of<DatabaseService>(context).timeEntryListStream, initialData: [], lazy: false),
                  ChangeNotifierProvider<StopwatchState>(create: (context) => StopwatchState())
                ],
                child: builder(context, snapshot),
              );
            },
            child: builder(context, snapshot),
          );
        }
        return builder(context, snapshot);
      },
    );
  }
}
